package simpledb.testing;/******************************************************************/import java.sql.Connection;import java.sql.Driver;import java.sql.SQLException;import java.sql.Statement;import java.util.Random;import simpledb.query.Plan;import simpledb.query.Scan;import simpledb.remote.SimpleDriver;import simpledb.server.SimpleDB;import simpledb.tx.Transaction;public class CreateTestTables { final static int maxSize=1000; /**  * @param args  */ public static void main(String[] args) {  String qry="";  Random rand=null;  try {   // analogous to the driver -- wanted to do this off the server because I was having issues with the server   SimpleDB.init("studentdb", "LRU");   // analogous to the connection   Transaction tx = new Transaction();   //table for static hash   System.out.println("=================CREATING STATIC HASH TABLE (TEST1)=======================");   qry = "Create table test1 (a1 int, a2 int)";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //table for extensible hash   System.out.println("=================CREATING EXTENSIBLE HASH TABLE (TEST2)=======================");   qry = "Create table test2" + "( a1 int," + " a2 int" + ")";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //table for b-tree index   System.out.println("=================CREATING B-TREE TABLE (TEST3)=======================");   qry = "Create table test3" + "( a1 int," + "a2 int" + ")";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //table for no index   System.out.println("=================CREATING NO INDEX TABLE (TEST4)=======================");   qry = "Create table test4" + "( a1 int," + "a2 int" + ")";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //table for joins   System.out.println("=================CREATING TABLE FOR JOINS (TEST5)=======================");   qry = "Create table test5" + "( a1 int," + "a2 int" + ")";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //create static hash on table 1   System.out.println("=================CREATING STATIC HASH INDEX=======================");   qry = "create sh index idx1 on test1 (a1)";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //create extensible-hash on table 2   System.out.println("=================CREATING EXTENSIBLE HASH INDEX=======================");   qry = "create ex index idx2 on test2 (a1)";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   tx = new Transaction();   //create b-tree index on table 3   System.out.println("=================CREATING B-TREE INDEX=======================");   qry = "create bt index idx3 on test3 (a1)";   SimpleDB.planner().executeUpdate(qry, tx);   tx.commit();   //populate the tables   System.out.println("======================POPULATING TABLES============================");   for(int i=1;i<6;i++)   {    if(i!=5)    {     rand=new Random(1);// ensure every table gets the same data     for(int j=0;j<maxSize;j++)     {      tx = new Transaction();      qry = "insert into test" + i + " (a1, a2) values ("+rand.nextInt(500)+","+ rand.nextInt(500) + ")";      SimpleDB.planner().executeUpdate(qry, tx);      tx.commit();     }    }    else//case where i=5    {     for(int j=0;j<maxSize/2;j++)// insert 10000 records into test5     {      tx = new Transaction();      qry = "insert into test"+i+"(a1,a2) values ("+j+","+j+ ")";      SimpleDB.planner().executeUpdate(qry, tx);      tx.commit();     }    }   }   //Static Hash -- tests   System.out.println("==================STATIC HASH======================");   tx = new Transaction();   SimpleDB.fileMgr().refreshDiskIOS();   long startTime = System.nanoTime();   qry = "select a1, a2 from test1 where a1 = 324";   Plan p =SimpleDB.planner().createQueryPlan(qry, tx);   Scan s = p.open();   while (s.next()) {    int a1 = s.getInt("a1");    int a2 = s.getInt("a2");   }   s.close();   tx.commit();   long endTime = System.nanoTime();   System.out.println("Took " + (endTime - startTime) + " ns");   System.out.println("Disk IOs: " + SimpleDB.fileMgr().getDiskIOS());   //extensible hash -- tests   System.out.println("========================EXTENSIBLE HASH=============================");   tx = new Transaction();   SimpleDB.fileMgr().refreshDiskIOS();   startTime = System.nanoTime();   qry = "select a1, a2 from test2 where a1 = 324";   p = SimpleDB.planner().createQueryPlan(qry, tx);   s = p.open();   while (s.next()) {    int a1 = s.getInt("a1");    int a2 = s.getInt("a2");   }   s.close();   tx.commit();   endTime = System.nanoTime();   System.out.println("Took " + (endTime - startTime) + " ns");   System.out.println("Disk IOs: " + SimpleDB.fileMgr().getDiskIOS());   //b-tree -- tests   System.out.println("===============================B TREE=============================");   tx = new Transaction();   SimpleDB.fileMgr().refreshDiskIOS();   startTime = System.nanoTime();   qry = "select a1, a2 from test3 where a1 = 324";   p = SimpleDB.planner().createQueryPlan(qry, tx);   s = p.open();   while (s.next()) {    int a1 = s.getInt("a1");    int a2 = s.getInt("a2");   }   s.close();   tx.commit();   endTime = System.nanoTime();   System.out.println("Took " + (endTime - startTime) + " ns");   System.out.println("Disk IOs: " + SimpleDB.fileMgr().getDiskIOS());   //no index -- tests   System.out.println("======================================NO INDEX================================");   tx = new Transaction();   SimpleDB.fileMgr().refreshDiskIOS();   startTime = System.nanoTime();   qry = "select a1, a2 from test4 where a1 = 324";   p = SimpleDB.planner().createQueryPlan(qry, tx);   s = p.open();   while (s.next()) {    int a1 = s.getInt("a1");    int a2 = s.getInt("a2");   }   s.close();   tx.commit();   endTime = System.nanoTime();   System.out.println("Took " + (endTime - startTime) + " ns");   System.out.println("Disk IOs: " + SimpleDB.fileMgr().getDiskIOS());   //don't try until we have the join working//   tx = new Transaction();//   SimpleDB.fileMgr().refreshDiskIOS();//   startTime = System.nanoTime();//   qry = "select a1, a2 from test5, test1 where test5.a1 = test1.a1";//   p = SimpleDB.planner().createQueryPlan(qry, tx);////   s = p.open();//   while (s.next()) {//    int a1 = s.getInt("a1");//    System.out.println("{a1: " + a1 + "}");//   }////   endTime = System.nanoTime();//   System.out.println("Took " + (endTime - startTime) + " ns");//   System.out.println("DiskIOs: " + SimpleDB.fileMgr().getDiskIOS());  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  } }}