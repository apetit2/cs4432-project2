package simpledb.planner;

import simpledb.materialize.SmartMergeJoinPlan;
import simpledb.parse.QueryData;
import simpledb.query.*;
import simpledb.server.SimpleDB;
import simpledb.tx.Transaction;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * A query planner which forces a SmartMergeJoin on the tables specified
 * over a predefined constant field name in both tables
 */
public class ExploitSortQueryPlanner implements QueryPlanner {

//    private static final String JOIN_FIELD_NAME = "MyJoinField";
    /**
     * Requirements: There must be exactly two tables in the QueryData object
     * and they both must have the field of value  of JOIN_FIELD_NAME.
     * Creates a query plan as follows.
     * It creates a smart merge join of the two tables
     * (***It does not take product of the tables);
     * it then selects on the predicate;
     * and finally it projects on the field list.
     */
    public Plan createPlan(QueryData data, Transaction tx) {
        //Check there are two tables specified in query data
        if (data.tables().size()!= 2) {
            System.out.println("Exactly two tables are required for the use of ExploitSortQueryPlanner");
            System.exit(1);
        }

        //Step 1: Create a plan for each mentioned table or view
        List<Plan> plans = new ArrayList<>();
        for (String tblname : data.tables()) {
            String viewdef = SimpleDB.mdMgr().getViewDef(tblname, tx);
            if (viewdef != null)
                plans.add(SimpleDB.planner().createQueryPlan(viewdef, tx));
            else
                plans.add(new TablePlan(tblname, tx));
        }

//        //Check if both of the two tables contain the JOIN_FIELD_NAME field
//        if (!plans.get(0).schema().hasField(JOIN_FIELD_NAME) || !plans.get(1).schema().hasField(JOIN_FIELD_NAME))
//            throw new Exception(String.format("Both tables must contain the field: %s", JOIN_FIELD_NAME));

        TablePlan p1 = (TablePlan) plans.get(0);
        TablePlan p2 = (TablePlan) plans.get(1);
        List<String> sharedFields = new ArrayList<>(p1.schema().fields());
        sharedFields.retainAll(p2.schema().fields());
        String chosenField = sharedFields.get(0);

        //Step 2: Create a SmartMergeJoinPlan for the tables
        Plan p = new SmartMergeJoinPlan(p1, p2, chosenField, chosenField, tx);

        //Step 3: Add a selection plan for the predicate
        p = new SelectPlan(p, data.pred());

        //Step 4: Project on the field names
        p = new ProjectPlan(p, data.fields());
        return p;
    }
}
