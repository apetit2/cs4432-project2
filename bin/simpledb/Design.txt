Least Recently Used Replacement Policy:
    This policy was implemented by solely modifying the BasicBufferMgr.Java page.
    To implement it, we used a linked-list to keep track of the frame numbers of all unpinned buffers in the buffer pool.
    This linked list was updated every time a buffer was looked up, whereas we would reposition the buffer that
    was just searched for to have its frame be at the end of the list because it was that buffer was now the most recently used. In this way, the least
    recently used frame would always remain at the head of the linked-list. So once, the buffer pool became full,
    if the least recently used policy was being used, we simply look up the first frame in the least recently used linked-list,
    remove this frame from the linked list and return the buffer at this frame in the bufferpool.

Clock Replacement Policy:
    This policy was implemented by again solely modifying the BasicBufferMgr.Java page.
    To implement it, we only needed to add a small integer field to the BasicBufferMgr class, to keep track
    of which buffer pool frame the clock was pointing to (should remain zero until the buffer pool fills up).
    From here its relatively simple to understand. If the buffer pool is full, we check the clock pointer value,
    if this value points to a frame that has a buffer that does not have a block pinned to it , we return that buffer.
    If it is pinned (and assuming there is some buffer that has a block that is not pinned to it), we keep incrementing the clock
    pointer (or moving back to the start if we hit the max size of the buffer pool so as to stay in a circle) and find the next
    available buffer that has a block that is not pinned to it. We continue to keep track of this clock pointer.

Efficient Finding of Empty Frame:
    To efficiently find empty frames, we use a linked list to keep track of all open frames. This linked list is filled when
    a new BasicBufferManager is initialized, as all frames at this time should be free of any blocks. A linked list was used
    because removing the first element of the list is O(1) since the rest of the array does not get modified when we remove this element.
    When the buffer manager needs a new frame to store a block to we remove the first element in this linked list (called avaliableFrames)
    -- the element that we remove is the frame of the buffer pool that is currently open.

Efficient Search for a Given Disk Block
    To efficiently find a given disk block we use a hash map that is of the structure <Block, Integer>. Every time we pin a new block to a buffer
    we update the hashmap to point that block to a frame in the buffer pool. So whenever we go to look up if a block exists in the bufferpool,
    we search the hashmap (which is O(n)) and either return the frame that the block exists at in the bufferpool or
    return null signifying that the block does not currently exist in the bufferpool.